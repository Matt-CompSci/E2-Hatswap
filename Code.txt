@name HatSwapping Minigame
@inputs [EGP]:wirelink
@persist [HatIDs HatOriginalPositions EndIDs]:array 
@persist [SwapStartID SwapEndID HiddenUnder SwapPercentage SwapNumber AskingQuestion Answer Playing Cheat]:number
@persist [StartPos EndPos]:vector
@persist [Player]:entity

if(first())
{
    # Do you want to see where it's hidden?
    Cheat = 0
    
    findByClass("gmod_wire_egp_emitter")
    Screen = findClosest(entity():pos())
    entity():createWire(Screen, "EGP", "wirelink")
    
    EGP:egpClear()
    
    EGP:egpText(1, "Hat Game: Type !hat into chat to play", vec2(256))
    EGP:egpAlign(1, 1, 1)
    EGP:egpSize(1, 42)
    
    function void drawHat(ID:number, Pos:vector)
    {
        HatOriginalPositions:pushVector(Pos)
        HatIDs:pushNumber(ID)
        holoCreate(ID)
        holoModel(ID, "models/player/items/humans/top_hat.mdl")
        holoPos(ID, Pos)
        holoScale(ID, vec(2))
    }
    
    runOnChat(1)
}

elseif(chatClk())
{
    hideChat(1)
    if(AskingQuestion)
    {
        if(lastSpoke() == Player)
        {
            Answer = lastSaid():toNumber()
            
            if(Answer > 0 & Answer < 4)
            {
                timer("RevealTurtle", 500)
                runOnChat(1)
            }
        }
    }
    
    else
    {
        if(lastSaid():left(4):lower() == "!hat")
        {
            Player = lastSpoke()
            moneyRequest(Player, 1000)
        }
    }
    
    hideChat(0)
}

if(moneyClk())
{
    if(!Playing)
    {
        Player = moneyClkPlayer()
        
        drawHat(1, entity():pos() - entity():forward() * 20 - entity():up() * 4 + entity():right() * 40)
        drawHat(2, entity():pos() - entity():forward() * 20 - entity():up() * 4)
        drawHat(3, entity():pos() - entity():forward() * 20 - entity():up() * 4 - entity():right() * 40)
        
        EndIDs = HatIDs
        
        HiddenUnder = HatIDs[randint(1, 3), number]
        HiddenHoloPos = HatOriginalPositions[HiddenUnder, vector]
        
        holoPos(HiddenUnder, HiddenHoloPos + vec(0, 0, 20))
        
        holoCreate(4)
        holoModel(4, "models/props/de_tides/vending_turtle.mdl")
        holoPos(4, HiddenHoloPos + vec(0, 0, 5))
        
        
        timer("HideTurtle", 2000)
        runOnChat(0)
        
        Playing = 1
    }
    
    else
    {
        moneyGive(moneyClkPlayer(), 1000)
    }
}

elseif(clk("HideTurtle"))
{
    holoAlpha(4, 0)
    holoPos(HiddenUnder, HatOriginalPositions[HiddenUnder, vector])
    
    timer("StartSwap", 1000)
}

elseif(clk("StartSwap"))
{
    SwapNumber++
    
    if(SwapNumber > 20)
    {
        timer("AskQuestion", 50)
    }
    
    else
    {
        SwapStartID = randint(1, 3)
        SwapEndID = randint(1, 3)
        
        while(SwapStartID == SwapEndID)
        {
            SwapEndID = randint(1, 3)
        }
        
        EndIDs[SwapStartID, number] = SwapEndID
        EndIDs[SwapEndID, number] = SwapStartID 
        
        holoPos(SwapStartID, holoEntity(SwapStartID):pos() + vec(0, 0, 20))
        holoPos(SwapEndID, holoEntity(SwapEndID):pos() + vec(0, 0, 20))
        
        StartPos = holoEntity(SwapStartID):pos()
        EndPos = holoEntity(SwapEndID):pos()
        
        SwapPercentage = 0
        
        timer("DoSwap", 25)
    }
}

elseif(clk("DoSwap"))
{
    SwapPercentage += 0.2
    Pos1 = bezier(StartPos, entity():pos() + entity():forward() * 60, EndPos, SwapPercentage)
    Pos2 = bezier(EndPos, entity():pos() - entity():forward() * 20, StartPos, SwapPercentage)
    
    holoPos(HatIDs[SwapStartID, number], Pos1)
    holoPos(HatIDs[SwapEndID, number], Pos2)
    
    if(SwapPercentage == 1)
    {
        timer("StartSwap", 500)
        holoPos(SwapStartID, holoEntity(SwapStartID):pos() - vec(0, 0, 20))
        holoPos(SwapEndID, holoEntity(SwapEndID):pos() - vec(0, 0, 20))
    }
    
    else
    {
        timer("DoSwap", 50)
    }
}

elseif(clk("AskQuestion"))
{
    AskingQuestion = 1
    EGP:egpSetText(1, Player:name() + " : Which hat is the turtle under? 1, 2, or 3?")
    
    EGP:egpText(2, "Type your answer in chat!", vec2(256, 384))
    EGP:egpAlign(2, 1, 1)
    EGP:egpSize(2, 42)
    runOnChat(1)
    
    if(Cheat)
    {
        print(EndIDs[HiddenUnder, number])
    }
}

elseif(clk("RevealTurtle"))
{
    HiddenHoloPos = holoEntity(EndIDs[HiddenUnder, number]):pos()
    
    holoPos(EndIDs[HiddenUnder, number], HiddenHoloPos + vec(0, 0, 20))
    holoPos(4, HiddenHoloPos + vec(0, 0, 5))
    holoAlpha(4, 255)
    
    EGP:egpRemove(2)
    
    EGP:egpSetText(1, Answer == EndIDs[HiddenUnder, number] ? "You win!" : "You lose!")
    EGP:egpColor(1, Answer == EndIDs[HiddenUnder, number] ? vec(0, 255, 0) : vec(255, 0, 0))
    
    if(Answer == EndIDs[HiddenUnder, number])
    {
        moneyGive(Player, 2000)
    }
    
    timer("Reset", 3000)
}

elseif(clk("Reset"))
{
    reset()
}


